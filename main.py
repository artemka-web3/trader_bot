from aiogram import Bot, Dispatcher, executor, types, exceptions
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from datetime import datetime, timedelta
from aiodb import BotDB
from config import *
from pytz import timezone
from kb import *
from fsm import *
from cp import *

import asyncio
import aioschedule
import logging
import time
import moex_async
import datetime as dt
import pytz
import aiofiles
import aiocsv


# ___________Configure__logging___________
logging.basicConfig(level=logging.INFO)
offset = dt.timezone(timedelta(hours=3))
volumes_avg_prev = {}
collecting_avg_event = asyncio.Event()
another_share_event = asyncio.Event()

tasks = []



# ___________Initialize__bot__and__dispatcher___________
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = BotDB('prod.sqlite3')


@dp.message_handler(lambda message: '‚ÑπÔ∏è –û –±–æ—Ç–µ. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' == message.text or message.text.lower() == '/start' or message.text.lower() == '/help')
async def send_welcome(message: types.Message):
    user_exists = await db.user_exists(message.from_user.id)
    if not user_exists:
        start_command = message.text
        referer_id = str(start_command[7:])
        if str(referer_id) != '':
            if str(referer_id) != str(message.from_user.id):
                await db.add_user(message.from_user.id, int(referer_id))
                try:
                    await bot.send_message(int(referer_id), '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è –Ω–æ–≤—ã–π —é–∑–µ—Ä', reply_markup=keyb_for_unsubed)
                except:
                    pass
            else:
                await db.add_user(message.from_user.id)
                await message.answer("–ù–µ–ª—å–∑—è —Ä–µ–≥–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ!", reply_markup=keyb_for_unsubed)
        else:
            await db.add_user(message.from_user.id)

    if await is_in_pay_sys(message.from_user.id) and await check_if_subed(message.from_user.id):
        await message.reply(""""–†–∞–¥–∞—Ä –±–∏—Ä–∂–∏" –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∞–∫—Ü–∏–π —Ç–æ—Ä–≥—É–µ–º—ã—Ö –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.\n–ï—Å–ª–∏ –±–æ—Ç –≤–∏–¥–∏—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—å–µ–º—ã –≤ –∞–∫—Ü–∏–∏, —Ç–æ –æ–Ω —Å—Ä–∞–∑—É —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º.\n\n–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç:\nüî∏ –ö–∞–∫–æ–π –æ–±—å–µ–º –±—ã–ª –∫—É–ø–ª–µ–Ω\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å –≤ –∞–∫—Ü–∏–∏.\nüî∏ –û –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.""", reply_markup=keyb_for_subed)
    else:
        await message.reply(""""–†–∞–¥–∞—Ä –±–∏—Ä–∂–∏" –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∞–∫—Ü–∏–π —Ç–æ—Ä–≥—É–µ–º—ã—Ö –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ.\n–ï—Å–ª–∏ –±–æ—Ç –≤–∏–¥–∏—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—å–µ–º—ã –≤ –∞–∫—Ü–∏–∏, —Ç–æ –æ–Ω —Å—Ä–∞–∑—É —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º.\n\n–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç:\nüî∏ –ö–∞–∫–æ–π –æ–±—å–µ–º –±—ã–ª –∫—É–ø–ª–µ–Ω\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å –≤ –∞–∫—Ü–∏–∏.\nüî∏ –û –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.""", reply_markup=keyb_for_unsubed)

@dp.message_handler(lambda message: "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" == message.text)
async def get_user_agreement(message: types.Message):
    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: https://telegra.ph/Polzovatelskoe-soglashenie-07-13-5')

#___________Referral__&&__Subscription__Things___________
@dp.message_handler(lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' or message.text.lower() == '/subscribe')
async def buy_sub_first(message: types.Message):
    if await is_in_pay_sys(message.from_user.id):
        if await check_if_subed(message.from_user.id) and not await do_have_free_sub(message.from_user.id):
            await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_subed)
        elif not await check_if_subed(message.from_user.id) and await do_have_free_sub(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å,–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º", reply_markup=create_not_first_time_buying_kb(message.from_user.id))
        else:
            await message.answer("–ö—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=create_not_first_time_buying_kb(message.from_user.id))
    else:
        if await do_have_free_sub(message.from_user.id):
            await message.answer('–£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –∫—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', reply_markup=create_buying_link(message.from_user.id))
        else:
            await message.answer("–ö—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=create_buying_link(message.from_user.id))
# @dp.callback_query_handler()
# async def cancel_subscription(callback: types.CallbackQuery):
#     if callback.data == 'cancel_sub':
#         cancel_sub(int(callback.from_user.id))
#         count_money_attracted_by_one(callback.from_user.id)
#         await callback.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å ‚úÖ', reply_markup=keyb_for_unsubed)

# @dp.callback_query_handler()
# async def handle_callbacks(callback_query: types.CallbackQuery):
#     if callback_query.data == 'cancel_sub':
#         await cancel_sub(int(callback_query.from_user.id))
#         await count_money_attracted_by_one(callback_query.from_user.id)
#         await callback_query.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å ‚úÖ', reply_markup=keyb_for_unsubed)


@dp.message_handler(commands=['ref'])
async def get_yo_ref_data(message: types.Message):
    user_exists = await db.user_exists(message.from_user.id)
    if user_exists:
        if await is_in_pay_sys(message.from_user.id):
            if await check_if_subed(message.from_user.id) and not await do_have_free_sub(message.from_user.id):
                ref_traffic = await db.get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed)
            elif not await check_if_subed(message.from_user.id) and await do_have_free_sub(message.from_user.id):
                ref_traffic = await db.get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed)
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
        else:
            if await do_have_free_sub(message.from_user.id):
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed)
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
    else:
        await db.add_user(message.from_user.id)
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î, –Ω–æ —è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞ —á—Ç–æ–± –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyb_for_unsubed)

@dp.message_handler(lambda message: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞' == message.text or message.text.lower() == '/profile')
async def get_profile_data(message: types.Message):
    user_exists = await db.user_exists(message.from_user.id)
    if user_exists:
        if await is_in_pay_sys(message.from_user.id):
            if await check_if_subed(message.from_user.id):
                #ref_traffic = db.get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ–π ID: {message.from_user.id}\n"+ f"\n–£ –≤–∞—Å –µ—Å—Ç—å –µ—â–µ {await get_sub_end(message.from_user.id)} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π. \n\n–ù–µ –ø—É–≥–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Å –≤–∞—Å –Ω–µ —Å–Ω–∏–º—É—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø—Ä–æ—Å—Ç–æ —É –≤–∞—Å –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞!", reply_markup=create_cancel_kb(message.from_user.id))
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
        else:
            if await do_have_free_sub(message.from_user.id):
                days = await before_end_of_free_sub(message.from_user.id)
                await message.answer(
                    f"–¢–≤–æ–π ID: {message.from_user.id}\n"+ 
                    f"\n–î–æ –∫–æ–Ω—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", reply_markup=keyb_for_subed
                )
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
    else:
        await db.add_user(message.from_user.id)
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î, –Ω–æ —è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞ —á—Ç–æ–± –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyb_for_unsubed)

#______________ADMIN___PANEL___THINGS__________________
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_command(message: types.Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.reset_state()
    # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await state.finish()
    await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ. –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.', reply_markup=keyb_for_subed)

@dp.message_handler(commands=['admin'])
async def admin_things(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω:\n"+
            "/free_sub - –û—Ç–¥–∞—Ç—å –∫–æ–º—É-—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n"+
            "/extend_sub_for_paid_users - –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–º –∏–ª–∏ –∫–æ–º—É-—Ç–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n"+
            "/make_partner - –ø—Ä–∏—Å–≤–æ–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"+
            "/extend_free_sub - –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ \n"+
            "/check_referal -  –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ \n" +
            "/cancel - —Å–±—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        )

@dp.message_handler(commands=['free_sub'])
async def give_free_sub(message: types.Message, state = FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
        await state.set_state(GiveFreeSub.CHOOSE_USER)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
@dp.message_handler(state=GiveFreeSub.CHOOSE_USER)
async def give_free_sub_step_choose_user(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if await check_if_subed(int(message.text)) and await is_in_pay_sys(int(message.text)):
            await state.finish()
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ cloud payments")
        elif not await check_if_subed(int(message.text)) and await is_in_pay_sys(int(message.text)):
            await state.update_data(user_id = message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
            await state.set_state(GiveFreeSub.SET_TIME_FOR_SUB)
        else:
            await state.update_data(user_id = message.text)
            await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
            await state.set_state(GiveFreeSub.SET_TIME_FOR_SUB)

    else:
        await state.finish()
        await message.answer("–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /free_sub")
    await ()

@dp.message_handler(state=GiveFreeSub.SET_TIME_FOR_SUB)
async def give_free_sub_step_choose_time(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            user_id = data['user_id']
            try:
                await state.finish()
                await bot.send_message(user_id, f'–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π')
                await db.set_free_sub_end(user_id, datetime.now() + timedelta(days=int(message.text)))
                await message.answer(f'–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–Ω –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

            except:
                await state.finish()
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–Ω –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    else:
        await state.finish()
        await message.answer("–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /free_sub")

@dp.message_handler(commands=['extend_free_sub'])
async def extend_free_sub(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –æ–¥–Ω–æ–º—É –∏–ª–∏ –≤—Å–µ–º —É –∫–æ–≥–æ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=one_or_m)
        await state.set_state(ExtendFreeSub.CHOSE_MODE)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")
@dp.message_handler(state= ExtendFreeSub.CHOSE_MODE)
async def extend_free_sub_mode(message: types.Message, state: FSMContext):
    if message.text == '–û–¥–∏–Ω':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
        await state.set_state(ExtendFreeSub.CHOOSE_ID)
    elif message.text == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        await message.answer("–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—è–º?")
        await state.set_state(ExtendFreeSub.SET_TIME_FOR_ALL)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')

@dp.message_handler(state= ExtendFreeSub.SET_TIME_FOR_ALL)
async def extend_free_sub_all(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        users_with_free = await get_users_with_free_sub()
        for user_id in users_with_free:
            free_sub = await db.get_free_sub_end(int(user_id))
            if free_sub is not None:
                free_sub = datetime.strptime(free_sub, '%Y-%m-%d %H:%M:%S.%f')
                free_sub = free_sub + timedelta(days=int(message.text))
                await db.set_free_sub_end(int(user_id), free_sub)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')

@dp.message_handler(state= ExtendFreeSub.CHOOSE_ID)
async def extend_free_sub_id(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if await is_in_pay_sys(message.text) and not await check_if_subed(int(message.text)):
            if await do_have_free_sub(int(message.text)):
                await state.update_data(user_id = message.text)
                await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                await state.set_state(ExtendFreeSub.SET_TIME)
            else:
                await state.finish()
                await message.answer("–£ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        elif not await is_in_pay_sys(int(message.text)) and await do_have_free_sub(int(message.text)):
            await state.update_data(user_id = message.text)
            await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
            await state.set_state(ExtendFreeSub.SET_TIME)
        else:
            await state.finish()
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ç–∫ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')

@dp.message_handler(state= ExtendFreeSub.SET_TIME)
async def extend_free_sub_choose_date_for_one(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = None
        async with state.proxy() as data:
            user_id = data['user_id']
        free_sub = await db.get_free_sub_end(user_id)
        if free_sub is not None:
            free_sub = datetime.strptime(free_sub, '%Y-%m-%d %H:%M:%S.%f')
            free_sub = free_sub + timedelta(days=int(message.text))
            try:
                await state.finish()
                await bot.send_message(user_id, "–í–∞–º –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∞")
                await db.set_free_sub_end(user_id, free_sub)
            except:
                await state.finish()
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else: 
        await state.finish()
        await message.answer('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_free_sub')



@dp.message_handler(commands=['extend_sub_for_paid_users'])
async def extend_sub(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º—É-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–ª–∏ –≤—Å–µ–º —é–∑–µ—Ä–∞–º?", reply_markup=one_or_m)
        await state.set_state(ExtendSub.CHOSE_MODE)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω!')

        
@dp.message_handler(state=ExtendSub.CHOSE_MODE)
async def extend_sub_one_or_m(message: types.Message, state: FSMContext):
    if message.text == "–û–¥–∏–Ω":
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
        await state.set_state(ExtendSub.CHOOSE_ID)
    elif message.text == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        await message.answer('–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? –û—Ç–≤–µ—Ç—å—Ç–µ —á–∏—Å–ª–æ–º')
        await state.set_state(ExtendSub.SET_DAYS_M)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')


@dp.message_handler(state=ExtendSub.SET_DAYS_M)
async def extend_sub_for_all(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await update_sub_for_all(days=int(message.text))
        await state.finish()
        await message.answer("–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    else:
        await state.reset_state()
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub')

@dp.message_handler(state=ExtendSub.CHOOSE_ID)
async def extend_sub_id(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if await is_in_pay_sys(int(message.text)):
            if await check_if_subed(int(message.text)):
                if await do_have_free_sub(int(message.text)) == False:
                    await state.update_data(user_id = message.text)
                    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    await state.set_state(ExtendSub.SET_EXTEND_TIME_O)
                else:
                    await state.reset_state()
                    await message.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–º—É –ø–ª–∞—Ç–Ω—É—é –±–µ–∑ –µ–≥–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è, –æ–Ω –¥–æ–ª–∂–µ–Ω –∫—É–ø–∏—Ç—å –µ–µ —Å–∞–º. \n  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")
            else: 
                await state.reset_state()    
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub") 
        else:
            await state.reset_state()
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É.  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")
    else:
        await state.reset_state()
        await message.answer("–í—ã —Å–¥–µ–ª–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")

@dp.message_handler(state=ExtendSub.SET_EXTEND_TIME_O)
async def extend_sub_date(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = None
        async with state.proxy() as data:
            user_id = data['user_id']
        try:
            await state.finish()
            await bot.send_message(user_id, f'–í–∞–º –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π')
            await update_sub(user_id, days=int(message.text))
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω")
        except:
            await state.finish()
            await message.answer('–î–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∫ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞') 
    else:
        await state.reset_state()
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub')

@dp.message_handler(commands=['make_partner'])
async def make_partner(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(MakePartner.CHOOSE_ID)
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

@dp.message_handler(state=MakePartner.CHOOSE_ID)
async def make_partner_id(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        is_partner = await db.is_partner(int(message.text))
        if is_partner:
            await state.finish()
            await message.answer("–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –ø–∞—Ä—Ç–Ω–µ—Ä")
            return
        if await check_if_subed(int(message.text)) or await do_have_free_sub(int(message.text)):
            try:
                await state.finish()
                await bot.send_message(message.text, '–í–∞–º –ø—Ä–æ—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
                await message.answer("–í—ã –ø—Ä–∏—Å–≤–æ–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –æ–Ω –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω")
                await db.set_partner(int(message.text))
            except:
                await state.finish()
                await message.answer('–î–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∫ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞') 
        else:
            await state.reset_state()
            await message.answer("–ß–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä—Ç–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Ç–∞!")
    else:
        await state.reset_state()
        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /make_partner. –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')

@dp.message_handler(commands=['check_referal'])
async def check_ref(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(CheckRef.CHOOSE_ID)
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

@dp.message_handler(state=CheckRef.CHOOSE_ID)
async def get_stat(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        ref_traffic = await db.get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
        await message.answer(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ")
    else:
        await state.reset_state()
        await message.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ id. –í—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_ref —Å–Ω–æ–≤–∞ —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')

#_____–ê–°–ò–ù–•–†–û–ù–ù–´–ï__–§–£–ù–ö–¶–ò–ò__–î–õ–Ø__–í–´–ü–û–õ–ù–ï–ù–ò–Ø__–û–°–ù–û–í–ù–û–ì–û__–§–£–ù–ö–¶–ò–û–ù–ê–õ–ê
async def process_stock(stock, volume_avg_prev, coef):
    while True:
        await collecting_avg_event.wait()
        start_time = datetime.now(offset).replace(hour=9, minute=50, second=0, microsecond=0).time()
        end_time = datetime.now(offset).replace(hour=23, minute=50, second=0, microsecond=0).time()
        if end_time >= datetime.now(offset).time() and datetime.now(offset).time() >= start_time and datetime.now(offset).weekday() < 5:
            try:
                current_date = (datetime.now(offset)).strftime('%Y-%m-%d')
                current_hour = ("0" +str(datetime.now(offset).hour) if len(str(datetime.now(offset).hour)) < 2 else str(datetime.now(offset).hour))
                current_minute = ("0" +str(datetime.now(offset).minute) if len(str(datetime.now(offset).minute)) < 2 else str(datetime.now(offset).minute))
                current_second = ("0" +str(datetime.now(offset).second) if len(str(datetime.now(offset).second)) < 2 else str(datetime.now(offset).second))
                if int(current_second) < 50:
                    while int(current_second) < 50:
                        current_date = (datetime.now(offset)).strftime('%Y-%m-%d')
                        current_hour = ("0" +str(datetime.now(offset).hour) if len(str(datetime.now(offset).hour)) < 2 else str(datetime.now(offset).hour))
                        current_minute = ("0" +str(datetime.now(offset).minute) if len(str(datetime.now(offset).minute)) < 2 else str(datetime.now(offset).minute))
                        current_second = ("0" +str(datetime.now(offset).second) if len(str(datetime.now(offset).second)) < 2 else str(datetime.now(offset).second))
                        await asyncio.sleep(1)
                users_arr = await db.get_all_users()
                current_time = str(current_hour) +":"+ str(current_minute)
                stock_data = await moex_async.get_stock_data(stock[0]) 
                print(stock_data)
                sec_id = stock_data[0] # #
                sec_name = stock_data[1] 
                lot_size = stock_data[2]
                day_change = stock_data[3] # %
                current_stock_data = await moex_async.get_current_stock_volume(stock[0], current_time)
                current_price = current_stock_data[1] # —Ä—É–±–ª–µ–π
                volume_rub = current_stock_data[4] # –ú —Ä—É–±–ª–µ–π
                volume_shares = current_stock_data[5] 
                lot_amount = round(volume_shares / lot_size, 2) # –ª–æ—Ç–æ–≤
                price_change = await moex_async.get_price_change(stock[0], current_time) # %
                price_change_status = 0  #  –Ω–æ–ª—å –∏–∑–º–Ω–µ–Ω–∏–π
                if price_change > 0:
                    price_change_status = 1
                elif price_change < 0:
                    price_change_status = 2
                buyers_sellers = await moex_async.buyers_vs_sellers1(price_change_status)
                buyers = buyers_sellers[0] # %
                sellers = buyers_sellers[1] # %
                data = [sec_id, sec_name, day_change, current_price, volume_rub, lot_amount, price_change, buyers, sellers]
                dir = 'üîµ'
                if data[-3] > 0:
                    dir = "üü¢"
                elif data[-3] < 0:
                    dir = "üî¥"
                print(volume_avg_prev[stock[0]])
                check_volume = volume_avg_prev[stock[0]]
                print("CHECK VOLUME: ", check_volume)
                print("DATA 4: ", data[4])
                dif = check_volume * 99.75 / 100
                if check_volume + dif <= data[4] and data[4] > 1000000:
                    if users_arr:
                        for user in users_arr:
                            if await check_if_subed(user[0]) or await do_have_free_sub(user[0]) or await if_sub_didnt_end(user[0]):
                                await bot.send_message(
                                    int(user[0]),
                                    f"#{data[0]} <b>{data[1]}</b>\n\n{dir}–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º\n"+
                                    f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {data[-3]}%\n'+
                                    f'–û–±—ä–µ–º: {round(float(data[4])/1000000, 2)}M‚ÇΩ ({data[-4]} –ª–æ—Ç–æ–≤)\n' + 
                                    (f'<b>–ü–æ–∫—É–ø–∫–∞: {data[-2]}%</b> –ü—Ä–æ–¥–∞–∂–∞: {data[-1]}%\n' if data[-2] > data[-1] else f'–ü–æ–∫—É–ø–∫–∞: {data[-2]}% <b>–ü—Ä–æ–¥–∞–∂–∞: {data[-1]}%</b>\n') +
                                    f'–í—Ä–µ–º—è: {current_date[5:]} {current_time}\n'+
                                    f'–¶–µ–Ω–∞: {data[3]}‚ÇΩ\n'+ 
                                    f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {data[2]}%\n\n'+
                                    "<b>–ó–∞–º–µ—Ç–∏–ª –†–∞–¥–∞—Ä –ë–∏—Ä–∂–∏</b>\n"
                                    f"""<b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å <a href="https://t.me/{BOT_NICK}?start={user}">@{BOT_NICK}</a></b>""",
                                    disable_notification=False,
                                    parse_mode=types.ParseMode.HTML
                                )
            except exceptions.RetryAfter as e:
                time.sleep(e.timeout)
            except Exception as e:
                print(e)
        else:
            print(f'–¢–æ—Ä–≥–∏ –Ω–µ –∏–¥—É—Ç {stock[0]}')
        await asyncio.sleep(30) 

async def process_stocks():
    await collecting_avg_event.wait() 
    securities = await moex_async.get_securities()
    for stock in securities:
        # check if stock[0] in csv
        async with aiofiles.open('shares_v2.csv', mode='r') as reader:
            async for row in aiocsv.AsyncDictReader(reader, delimiter='\n'):
                if row is not None:
                    if row['–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–π ,—Ç–∏–∫–µ—Ç,—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ,–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'] is not None:
                        if row['–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–π ,—Ç–∏–∫–µ—Ç,—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ,–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'].split(',')[1] == stock[0]:
                            liq_id = int(row['–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–π ,—Ç–∏–∫–µ—Ç,—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ,–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'].split(',')[-1])
                            if liq_id != 0:
                                coef = 25
                                task = process_stock(stock, volumes_avg_prev, coef)
                                tasks.append(task)
        #task = asyncio.create_task(process_stock(stock, volumes_avg_prev))
    for task in tasks:
        asyncio.create_task(task)
        await asyncio.sleep(1)
        
         

async def main():
    await process_stocks()

async def delivery():
    users = await get_unsubed_users()
    if users:
        for user_id in users:
            await bot.send_message(user_id, '–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É–µ–º —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —Å—é–¥–∞. –í—ã–∑–æ–≤–∏ /subscribe')

async def collect_volumes_avg():
    global volumes_avg_prev
    collecting_avg_event.clear() 
    if datetime.now(offset).weekday() < 5:
        volumes_avg_prev = await moex_async.get_prev_avg_months(volumes_avg_prev, 3)
        collecting_avg_event.set() 
        return volumes_avg_prev
    else:
        collecting_avg_event.set() 
        return {}

async def schedule_collecting_volumes():
    await collect_volumes_avg()

async def scheduler():
    aioschedule.every(1).days.at('01:00').do(collect_volumes_avg)

    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(db.connect())
    asyncio.create_task(collect_volumes_avg())
    asyncio.create_task(main())
    asyncio.create_task(scheduler())



if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)