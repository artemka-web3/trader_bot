from aiogram import Bot, Dispatcher, executor, types, exceptions
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.types import ParseMode
from datetime import datetime, timedelta
from config import *
from pytz import timezone
from kb import *
from fsm import *
from moex_async import *
from aiocp_db import *
from aiodb import *
from collect_avg_volumes import *
from volumes_json import *
import asyncio
import aioschedule
import logging
import time
import datetime as dt


# ___________Configure__logging___________
logging.basicConfig(level=logging.INFO)
offset = dt.timezone(timedelta(hours=3))
volumes_avg_prev = {}
collecting_avg_event = asyncio.Event()
another_share_event = asyncio.Event()

tasks = []



# ___________Initialize__bot__and__dispatcher___________
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(lambda message: '‚ÑπÔ∏è –û –±–æ—Ç–µ. –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' == message.text or message.text.lower() == '/start' or message.text.lower() == '/help')
async def send_welcome(message: types.Message):
    user_exists = await if_user_exists(message.from_user.id)

    if not user_exists:
        start_command = message.text
        referer_id = str(start_command[7:])
        if str(referer_id) != '':
            if str(referer_id) != str(message.from_user.id):
                await add_user(user_id=message.from_user.id, referer_id=int(referer_id))
                try:
                    await bot.send_message(int(referer_id), '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∞–ª—Å—è –Ω–æ–≤—ã–π —é–∑–µ—Ä', reply_markup=keyb_for_unsubed)
                except:
                    pass
            else:
                await add_user(user_id=message.from_user.id)
                await message.answer("–ù–µ–ª—å–∑—è —Ä–µ–≥–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ!", reply_markup=keyb_for_unsubed)
        else:
            await add_user(user_id=message.from_user.id)

    if await is_in_pay_sys(message.from_user.id) and await check_if_subed(message.from_user.id):
        with open('intro.jpg', 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo, """<b>"–†–∞–¥–∞—Ä –±–∏—Ä–∂–∏"</b> –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∞–∫—Ü–∏–π —Ç–æ—Ä–≥—É–µ–º—ã—Ö –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ. –ï—Å–ª–∏ –±–æ—Ç –≤–∏–¥–∏—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—å–µ–º –≤ –∞–∫—Ü–∏–∏, —Ç–æ –æ–Ω —Å—Ä–∞–∑—É —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º.\n\n<b>–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç:</b>\n\nüî∏ –ö–∞–∫–æ–π –æ–±—å–µ–º –±—ã–ª –∫—É–ø–ª–µ–Ω.\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å.\nüî∏ –û –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.\n\n<b>–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞!</b>""", reply_markup=keyb_for_subed, parse_mode=ParseMode.HTML)
    else:
        with open('intro.jpg', 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo, """<b>"–†–∞–¥–∞—Ä –±–∏—Ä–∂–∏"</b> –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –∞–∫—Ü–∏–π —Ç–æ—Ä–≥—É–µ–º—ã—Ö –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ. –ï—Å–ª–∏ –±–æ—Ç –≤–∏–¥–∏—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—å–µ–º –≤ –∞–∫—Ü–∏–∏, —Ç–æ –æ–Ω —Å—Ä–∞–∑—É —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º.\n\n<b>–ë–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç:</b>\n\nüî∏ –ö–∞–∫–æ–π –æ–±—å–µ–º –±—ã–ª –∫—É–ø–ª–µ–Ω.\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.\nüî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å.\nüî∏ –û –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—å–µ–º–µ.\n\<b>–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞!</b>""", reply_markup=keyb_for_unsubed, parse_mode=ParseMode.HTML)
@dp.message_handler(lambda message: "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" == message.text)
async def get_user_agreement(message: types.Message):
    await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: https://telegra.ph/Polzovatelskoe-soglashenie-07-13-5', disable_web_page_preview=True)

#___________Referral__&&__Subscription__Things___________
@dp.message_handler(lambda message: message.text.lower() == '–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' or message.text.lower() == '/subscribe')
async def buy_sub_first(message: types.Message):
    user_exists = await if_user_exists(message.from_user.id)
    if user_exists:
        if await is_in_pay_sys(message.from_user.id):
            if await check_if_subed(message.from_user.id) and not await do_have_free_sub(message.from_user.id):
                await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_subed)
            elif not await check_if_subed(message.from_user.id) and await do_have_free_sub(message.from_user.id):
                await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å,–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º", reply_markup=create_not_first_time_buying_kb(message.from_user.id))
            else:
                await message.answer("–ö—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=create_not_first_time_buying_kb(message.from_user.id))
        else:
            if await do_have_free_sub(message.from_user.id):
                await message.answer('–£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –∫—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –æ–Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', reply_markup=create_buying_link(message.from_user.id))
            else:
                await message.answer("–ö—É–ø–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=create_buying_link(message.from_user.id))
    else:
        await add_user(user_id=message.from_user.id)
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—ã–∑–æ–≤–∏—Ç–µ /subscribe –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É"')

@dp.message_handler(commands=['ref'])
async def get_yo_ref_data(message: types.Message):
    user_exists = await if_user_exists(message.from_user.id)
    if user_exists:
        if await is_in_pay_sys(message.from_user.id):
            if await check_if_subed(message.from_user.id) and not await do_have_free_sub(message.from_user.id):
                ref_traffic = await get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed, disable_web_page_preview=True)
            elif not await check_if_subed(message.from_user.id) and await do_have_free_sub(message.from_user.id):
                ref_traffic = await get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed, disable_web_page_preview=True)
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
        else:
            if await do_have_free_sub(message.from_user.id):
                await message.answer(f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{BOT_NICK}?start={message.from_user.id}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ", reply_markup=keyb_for_subed, disable_web_page_preview=True)
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
    else:
        await add_user(user_id=message.from_user.id)
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î, –Ω–æ —è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞ —á—Ç–æ–± –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyb_for_unsubed)

@dp.message_handler(lambda message: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞' == message.text or message.text.lower() == '/profile')
async def get_profile_data(message: types.Message):
    user_exists = await if_user_exists(message.from_user.id)
    if user_exists:
        if await is_in_pay_sys(message.from_user.id):
            if await check_if_subed(message.from_user.id):
                #ref_traffic = db.get_referer_traffic(message.from_user.id) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
                await message.answer(f"–¢–≤–æ–π ID: {message.from_user.id}\n"+ f"\n–£ –≤–∞—Å –µ—Å—Ç—å –µ—â–µ {await get_sub_end(message.from_user.id)} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π. \n\n–ù–µ –ø—É–≥–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Å –≤–∞—Å –Ω–µ —Å–Ω–∏–º—É—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø—Ä–æ—Å—Ç–æ —É –≤–∞—Å –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞!", reply_markup=create_cancel_kb(message.from_user.id))
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
        else:
            if await do_have_free_sub(message.from_user.id):
                days = await before_end_of_free_sub(message.from_user.id)
                await message.answer(
                    f"–¢–≤–æ–π ID: {message.from_user.id}\n"+ 
                    f"\n–î–æ –∫–æ–Ω—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", reply_markup=keyb_for_subed
                )
            else:
                await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", reply_markup=keyb_for_unsubed)
    else:
        await add_user(user_id=message.from_user.id)
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î, –Ω–æ —è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞ —á—Ç–æ–± –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!", reply_markup=keyb_for_unsubed)

#______________ADMIN___PANEL___THINGS__________________
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_command(message: types.Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.reset_state()
    # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await state.finish()
    await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ. –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.', reply_markup=keyb_for_subed)

@dp.message_handler(commands=['admin'])
async def admin_things(message: types.Message):
    if message.from_user.id in ADMINS:
        await message.answer("–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω:\n"+
            "/free_sub - –û—Ç–¥–∞—Ç—å –∫–æ–º—É-—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n"+
            "/extend_sub_for_paid_users - –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–º –∏–ª–∏ –∫–æ–º—É-—Ç–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n"+
            "/make_partner - –ø—Ä–∏—Å–≤–æ–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"+
            "/extend_free_sub - –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ \n"+
            "/check_referal -  –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ \n" +
            "/cancel - —Å–±—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        )

@dp.message_handler(commands=['free_sub'])
async def give_free_sub(message: types.Message, state = FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot', disable_web_page_preview=True)
        await state.set_state(GiveFreeSub.CHOOSE_USER)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω!')
@dp.message_handler(state=GiveFreeSub.CHOOSE_USER)
async def give_free_sub_step_choose_user(message: types.Message, state: FSMContext):
    user_exists = await if_user_exists(int(message.text))
    if user_exists:
        if message.text.isdigit():
            if await check_if_subed(int(message.text)) and await is_in_pay_sys(int(message.text)):
                await state.finish()
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ cloud payments")
            elif not await check_if_subed(int(message.text)) and await is_in_pay_sys(int(message.text)):
                await state.update_data(user_id = message.text)
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                await state.set_state(GiveFreeSub.SET_TIME_FOR_SUB)
            else:
                await state.update_data(user_id = message.text)
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                await state.set_state(GiveFreeSub.SET_TIME_FOR_SUB)

        else:
            await state.finish()
            await message.answer("–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /free_sub")
    else:
        await state.reset_state()
        await add_user(user_id=int(message.text))
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /free_sub")
        

@dp.message_handler(state=GiveFreeSub.SET_TIME_FOR_SUB)
async def give_free_sub_step_choose_time(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            user_id = data['user_id']
            try:
                await state.finish()
                await bot.send_message(user_id, f'–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π')
                await set_free_sub_end(user_id, datetime.now() + timedelta(days=int(message.text)))
                await message.answer(f'–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–Ω –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

            except:
                await state.finish()
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–Ω –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    else:
        await state.finish()
        await message.answer("–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /free_sub")

@dp.message_handler(commands=['extend_free_sub'])
async def extend_free_sub(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –æ–¥–Ω–æ–º—É –∏–ª–∏ –≤—Å–µ–º —É –∫–æ–≥–æ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=one_or_m)
        await state.set_state(ExtendFreeSub.CHOSE_MODE)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")
@dp.message_handler(state= ExtendFreeSub.CHOSE_MODE)
async def extend_free_sub_mode(message: types.Message, state: FSMContext):
    if message.text == '–û–¥–∏–Ω':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot', disable_web_page_preview=True)
        await state.set_state(ExtendFreeSub.CHOOSE_ID)
    elif message.text == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        await message.answer("–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—è–º?")
        await state.set_state(ExtendFreeSub.SET_TIME_FOR_ALL)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')

@dp.message_handler(state= ExtendFreeSub.SET_TIME_FOR_ALL)
async def extend_free_sub_all(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        users_with_free = await get_users_with_free_sub()
        for user_id in users_with_free:
            free_sub = await get_free_sub_end(user_id)
            if free_sub is not None:
                free_sub = convert_strdate_to_date(free_sub)
                free_sub = free_sub + timedelta(days=int(message.text))
                await set_free_sub_end(int(user_id), free_sub)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')

@dp.message_handler(state= ExtendFreeSub.CHOOSE_ID)
async def extend_free_sub_id(message: types.Message, state: FSMContext):
    user_exists = await if_user_exists(int(message.text))
    if user_exists:
        if message.text.isdigit():
            if await is_in_pay_sys(message.text) and not await check_if_subed(int(message.text)):
                if await do_have_free_sub(int(message.text)):
                    await state.update_data(user_id = message.text)
                    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    await state.set_state(ExtendFreeSub.SET_TIME)
                else:
                    await state.finish()
                    await message.answer("–£ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            elif not await is_in_pay_sys(int(message.text)) and await do_have_free_sub(int(message.text)):
                await state.update_data(user_id = message.text)
                await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                await state.set_state(ExtendFreeSub.SET_TIME)
            else:
                await state.finish()
                await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ç–∫ —É —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        else:
            await state.reset_state()
            await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')
    else:
        await state.reset_state()
        await add_user(user_id=int(message.text))
        await message.answer('–≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–¥. \n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–∏–±–æ –¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–π—á–∞—Å –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /free_sub.')
        


@dp.message_handler(state= ExtendFreeSub.SET_TIME)
async def extend_free_sub_choose_date_for_one(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = None
        async with state.proxy() as data:
            user_id = data['user_id']
        free_sub = await get_free_sub_end(user_id)
        if free_sub is not None:
            free_sub = convert_strdate_to_date(free_sub)
            free_sub = free_sub + timedelta(days=int(message.text))
            try:
                await state.finish()
                await bot.send_message(user_id, "–í–∞–º –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∞")
                await set_free_sub_end(user_id, free_sub)
            except:
                await state.finish()
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else: 
        await state.finish()
        await message.answer('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_free_sub')



@dp.message_handler(commands=['extend_sub_for_paid_users'])
async def extend_sub(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º—É-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–ª–∏ –≤—Å–µ–º —é–∑–µ—Ä–∞–º?", reply_markup=one_or_m)
        await state.set_state(ExtendSub.CHOSE_MODE)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω!')

        
@dp.message_handler(state=ExtendSub.CHOSE_MODE)
async def extend_sub_one_or_m(message: types.Message, state: FSMContext):
    if message.text == "–û–¥–∏–Ω":
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot', disable_web_page_preview=True)
        await state.set_state(ExtendSub.CHOOSE_ID)
    elif message.text == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        await message.answer('–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? –û—Ç–≤–µ—Ç—å—Ç–µ —á–∏—Å–ª–æ–º')
        await state.set_state(ExtendSub.SET_DAYS_M)
    else:
        await state.reset_state()
        await message.answer('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')


@dp.message_handler(state=ExtendSub.SET_DAYS_M)
async def extend_sub_for_all(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await update_sub_for_all(days=int(message.text))
        await state.finish()
        await message.answer("–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    else:
        await state.reset_state()
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub')

@dp.message_handler(state=ExtendSub.CHOOSE_ID)
async def extend_sub_id(message: types.Message, state: FSMContext):
    user_exists = await if_user_exists(int(message.text))
    if user_exists:
        if message.text.isdigit():
            if await is_in_pay_sys(int(message.text)):
                if await check_if_subed(int(message.text)):
                    if await do_have_free_sub(int(message.text)) == False:
                        await state.update_data(user_id = message.text)
                        await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                        await state.set_state(ExtendSub.SET_EXTEND_TIME_O)
                    else:
                        await state.reset_state()
                        await message.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–º—É –ø–ª–∞—Ç–Ω—É—é –±–µ–∑ –µ–≥–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è, –æ–Ω –¥–æ–ª–∂–µ–Ω –∫—É–ø–∏—Ç—å –µ–µ —Å–∞–º. \n  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")
                else: 
                    await state.reset_state()    
                    await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub") 
            else:
                await state.reset_state()
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É.  –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")
        else:
            await state.reset_state()
            await message.answer("–í—ã —Å–¥–µ–ª–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub")
    else:
        await state.reset_state()
        await add_user(user_id=int(message.text))
        await message.answer('–≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–¥. \n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—ã–∑–≤–∞–≤ /extend_sub')
        


@dp.message_handler(state=ExtendSub.SET_EXTEND_TIME_O)
async def extend_sub_date(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_id = None
        async with state.proxy() as data:
            user_id = data['user_id']
        try:
            await state.finish()
            await bot.send_message(user_id, f'–í–∞–º –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {message.text} –¥–Ω–µ–π')
            await update_sub(user_id, days=int(message.text))
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω")
        except:
            await state.finish()
            await message.answer('–î–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∫ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞') 
    else:
        await state.reset_state()
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /extend_sub')

@dp.message_handler(commands=['make_partner'])
async def make_partner(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(MakePartner.CHOOSE_ID)
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot', disable_web_page_preview=True)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

@dp.message_handler(state=MakePartner.CHOOSE_ID)
async def make_partner_id(message: types.Message, state: FSMContext):
    user_exists = await if_user_exists(int(message.text))
    if user_exists:
        if message.text.isdigit():
            this_is_partner = await is_partner(int(message.text))
            if this_is_partner:
                await state.finish()
                await message.answer("–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –ø–∞—Ä—Ç–Ω–µ—Ä")
                return
            #if await check_if_subed(int(message.text)) or await do_have_free_sub(int(message.text)):
            try:
                await state.finish()
                await bot.send_message(message.text, '–í–∞–º –ø—Ä–æ—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
                await message.answer("–í—ã –ø—Ä–∏—Å–≤–æ–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ –æ–Ω –æ–± —ç—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω")
                await set_partner(int(message.text))
            except:
                await state.finish()
                await message.answer('–î–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∫ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞') 
            #else:
            #    await state.reset_state()
            #    await message.answer("–ß–µ–ª–æ–≤–µ–∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä—Ç–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –±–æ—Ç–∞!")
        else:
            await state.reset_state()
            await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /make_partner. –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
    else:
        await state.reset_state()
        await add_user(user_id=int(message.text))
        await message.answer('–≠—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–¥. –Ø –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞–≤ /make_partner')



@dp.message_handler(commands=['check_referal'])
async def check_ref(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.set_state(CheckRef.CHOOSE_ID)
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ—Ç –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω –ø—Ä–æ—Ñ–∏–ª—å https://t.me/getmy_idbot')
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω")

@dp.message_handler(state=CheckRef.CHOOSE_ID)
async def get_stat(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        ref_traffic = await get_referer_traffic(int(message.text)) # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π
        await message.answer(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: https://t.me/{BOT_NICK}?start={message.text}\n" + f"–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_traffic}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —é–∑–µ—Ä—ã: {await count_money_attracted_by_ref(message.from_user.id)}‚ÇΩ")
        await state.reset_state()
    else:
        await state.reset_state()
        await message.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ id. –í—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_ref —Å–Ω–æ–≤–∞ —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')

#_____–ê–°–ò–ù–•–†–û–ù–ù–´–ï__–§–£–ù–ö–¶–ò–ò__–î–õ–Ø__–í–´–ü–û–õ–ù–ï–ù–ò–Ø__–û–°–ù–û–í–ù–û–ì–û__–§–£–ù–ö–¶–ò–û–ù–ê–õ–ê        

# # async def delivery():
# #     users = await get_unsubed_users()
# #     if users:
# #         for user_id in users:
# #             await bot.send_message(user_id, '–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É–µ–º —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —Å—é–¥–∞. –í—ã–∑–æ–≤–∏ /subscribe')

async def send():
    data = await read_json()
    users = await get_all_users()
    logging.info('send')
    if data != []:
        for item in data:
            for user in users:
                if await check_if_subed(user[0]) or await do_have_free_sub(user[0]) or await if_sub_didnt_end(user[0]):
                    try:
                        await bot.send_message(
                            int(user[0]),
                            f"#{item['sec_id']} <b>{item['sec_name']}</b>\n\n{item['dir']}–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º\n"+
                            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {item['price_change']}%\n"+
                            f"–û–±—ä–µ–º: {round(float(item['volume_rub'])/1000000, 2)}M‚ÇΩ ({item['lot_amount']} –ª–æ—Ç–æ–≤)\n" + 
                            (f"<b>–ü–æ–∫—É–ø–∫–∞: {item['buyers']}%</b> –ü—Ä–æ–¥–∞–∂–∞: {item['sellers']}%\n" if item['buyers'] > item['sellers'] else f"–ü–æ–∫—É–ø–∫–∞: {item['buyers']}% <b>–ü—Ä–æ–¥–∞–∂–∞: {item['sellers']}%</b>\n") +
                            f"–í—Ä–µ–º—è: {item['current_date']} {item['time']}\n"+
                            f"–¶–µ–Ω–∞: {item['current_price']}‚ÇΩ\n"+ 
                            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {item['day_change']}%\n\n"+
                            "<b>–ó–∞–º–µ—Ç–∏–ª –†–∞–¥–∞—Ä –ë–∏—Ä–∂–∏</b>\n"
                            f"""<b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å <a href="https://t.me/{BOT_NICK}?start={user[0]}">@{BOT_NICK}</a></b>""",
                            disable_notification=False,
                            parse_mode=types.ParseMode.HTML,
                            disable_web_page_preview=True
                        )
                    except exceptions.RetryAfter as e:
                        time.sleep(e.timeout)
                        logging.info(f'–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–æ—Ç–∞ –Ω–∞ {e.timeout}')
                    except Exception as e:
                        logging.info(f"{item['sec_name']}\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n", e)
                        continue
        await clear_json()

def schedule_tasks():
    aioschedule.every(30).seconds.do(send)
    #aioschedule.every(1).seconds.do(collecting_avg)
    aioschedule.every().day.at('01:00').do(collecting_avg)


async def main():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    schedule_tasks()
    #asyncio.create_task(collecting_avg())
    asyncio.create_task(main())



if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)




# ERRORS
# :Unclosed client session
# Forbidden: bot was blocked by the user