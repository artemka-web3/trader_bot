//_____________HANDLE__FREE__SUBS__________________
// app.get('/free/semi_year/:account_id', function(req, res) {
//   var account_id = req.params.account_id;
//   res.render('free/free_semiyear', { "account_id": account_id })
//   // res.sendFile(path.join(__dirname + '/public/widget_semiyear.html'));
// });

// app.get('/free/month/:account_id', function(req, res) {
//   var account_id = req.params.account_id;
//   res.render('free/free_month',  { "account_id": account_id })

// });

// app.get('/free/year/:account_id', function(req, res) {
//   var account_id = req.params.account_id;
//   res.render('free/free_year',  { "account_id": account_id })
// });

// app.get('/free/getTokenMonth/:account_id/:trxId', function(req, res) {
//     var trxId = req.params.trxId;
//     var account_id = req.params.account_id;
//     const data = {
//       accountId: "764315256",
//     };
    
//     clientApi.getSubscriptionsList(data)
//       .then((response) => {
//         // Handle the response
//         console.log(response);
//       })
//       .catch((error) => {
//         // Handle any errors
//         console.error(error);
//       });
//     clientApi.refundPayment({TransactionId:parseInt(trxId), Amount: 10})
//     for(let i = 0; i < clientApi.getSubscriptionsList().length; i ++){
//       if(clientApi.getSubscriptionsList({accountId: account_id.toString()})[i].response.Model.Amount == 10){
//         console.log(11111)
//         clientApi.cancelSubscription({Id: clientApi.getSubscriptionsList({accountId: account_id.toString()})[i].response.Model.Amount})
//       }
//     }
//     db.run("UPDATE users SET trxId = ? WHERE user_id = ?", trxId, account_id, function(err) {
//         if (err) {
//           return console.log(err.message);
//         }
//         console.log(`A row has been inserted with rowid ${this.lastID}`);
//         return res.send('trxId ' + trxId + ' was successfully added!');
//      });
//     // –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
//     // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ç–≥ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ - res.redirect('')
//   });

// app.get('/free/getTokenSemiYear/:account_id/:trxId', function(req, res) {
//     var trxId = req.params.trxId;
//     var account_id = req.params.account_id;
//     clientApi.refundPayment({TransactionId:parseInt(trxId), Amount: 10})
//     for(let i = 0; i < clientApi.getSubscriptionsList({accountId: account_id.toString()}).length; i ++){
//       if(clientApi.getSubscriptionsList()[i].Amount == 10){
//         clientApi.cancelSubscription({Id: clientApi.getSubscriptionsList({accountId: account_id.toString()})[i].Amount})
//       }
//     }
    
//     db.run("UPDATE users SET trxId = ? WHERE user_id = ?", trxId, account_id, function(err) {
//         if (err) {
//           return console.log(err.message);
//         }
//         console.log(`A row has been inserted with rowid ${this.lastID}`);
//         return res.send('trxId ' + trxId + ' was successfully added!');
//      });
//     // –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
//     // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ç–≥ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ - res.redirect('')
//   });

//   app.get('/free/getTokenYear/:account_id/:trxId', function(req, res) {
//     var trxId = req.params.trxId;
//     var account_id = req.params.account_id;
    
    
//     db.run("UPDATE users SET trxId = ? WHERE user_id = ?", trxId, account_id, function(err) {
//         if (err) {
//           return console.log(err.message);
//         }
//         console.log(`A row has been inserted with rowid ${this.lastID}`);
//         return res.send('trxId ' + trxId + ' was successfully added!');
//      });
//     // –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
//     // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ç–≥ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ - res.redirect('')
//   });  







pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh rus>
Failed password for root from 218.92.0.22 port 11032 ssh2
Received disconnect from 218.92.0.22 port 11032:11:  [preauth]
Disconnected from authenticating user root 218.92.0.22 port 11032 [preauth]
PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost>

current_date = (datetime.now(offset)).strftime('%Y-%m-%d')
                current_hour = ("0" +str(datetime.now(offset).hour) if len(str(datetime.now(offset).hour)) < 2 else str(datetime.now(offset).hour))
                current_minute = ("0" +str(datetime.now(offset).minute - 1) if len(str(datetime.now(offset).minute - 1)) < 2 else str(datetime.now(offset).minute - 1))
                #current_second = ("0" +str(datetime.now(offset).second) if len(str(datetime.now(offset).second)) < 2 else str(datetime.now(offset).second)
                users_arr = await db.get_all_users()
                current_time = str(current_hour) +":"+ str(current_minute)
                stock_data = await get_stock_data(stock[0]) 
                sec_id = stock_data[0] # #
                sec_name = stock_data[1] 
                lot_size = stock_data[2]
                day_change = stock_data[3] # %
                current_stock_data = await get_current_stock_volume(stock[0], current_time)
                current_price = current_stock_data[1] # —Ä—É–±–ª–µ–π
                volume_rub = current_stock_data[4] # –ú —Ä—É–±–ª–µ–π
                volume_shares = current_stock_data[5] 
                lot_amount = round(volume_shares / lot_size, 2) # –ª–æ—Ç–æ–≤
                price_change = await get_price_change(stock[0], current_time) # %
                price_change_status = 0  #  –Ω–æ–ª—å –∏–∑–º–Ω–µ–Ω–∏–π
                if price_change > 0:
                    price_change_status = 1
                elif price_change < 0:
                    price_change_status = 2
                buyers_sellers = await buyers_vs_sellers1(price_change_status)
                buyers = buyers_sellers[0] # %
                sellers = buyers_sellers[1] # %
                data = [sec_id, sec_name, day_change, current_price, volume_rub, lot_amount, price_change, buyers, sellers]
                dir = 'üîµ'
                if data[-3] > 0:
                    dir = "üü¢"
                elif data[-3] < 0:
                    dir = "üî¥"
                check_volume = volume_avg_prev[stock[0]]           
                if check_volume * coef <= data[4] and data[4] > 1000000:
                    print(f"–ê–∫—Ü–∏—è: {data[0]}\n–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {round(float(check_volume)/1000000, 2)}M ‚ÇΩ\n–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º: {round(float(data[4])/1000000, 2)}M ‚ÇΩ\n____________________")
                    if users_arr:
                        for user in users_arr:
                            if await check_if_subed(user[0]) or await do_have_free_sub(user[0]) or await if_sub_didnt_end(user[0]):
                                await bot.send_message(
                                    int(user[0]),
                                    f"#{data[0]} <b>{data[1]}</b>\n\n{dir}–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º\n"+
                                    f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {data[-3]}%\n'+
                                    f'–û–±—ä–µ–º: {round(float(data[4])/1000000, 2)}M‚ÇΩ ({data[-4]} –ª–æ—Ç–æ–≤)\n' + 
                                    (f'<b>–ü–æ–∫—É–ø–∫–∞: {data[-2]}%</b> –ü—Ä–æ–¥–∞–∂–∞: {data[-1]}%\n' if data[-2] > data[-1] else f'–ü–æ–∫—É–ø–∫–∞: {data[-2]}% <b>–ü—Ä–æ–¥–∞–∂–∞: {data[-1]}%</b>\n') +
                                    f'–í—Ä–µ–º—è: {current_date[5:]} {current_time}\n'+
                                    f'–¶–µ–Ω–∞: {data[3]}‚ÇΩ\n'+ 
                                    f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {data[2]}%\n\n'+
                                    "<b>–ó–∞–º–µ—Ç–∏–ª –†–∞–¥–∞—Ä –ë–∏—Ä–∂–∏</b>\n"
                                    f"""<b>–ü–æ–¥–∫–ª—é—á–∏—Ç—å <a href="https://t.me/{BOT_NICK}?start={user}">@{BOT_NICK}</a></b>""",
                                    disable_notification=False,
                                    parse_mode=types.ParseMode.HTML,
                                    disable_web_page_preview=True
                                )
                else:
                    print(f"–ê–∫—Ü–∏—è: {data[0]}\n–ù–µ —Ö–≤–∞—Ç–∏–ª–æ –æ–±—ä–µ–º–æ–≤!!!\n____________________")